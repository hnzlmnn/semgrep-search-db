name: Build

on:
  schedule:
    # Run every Sunday at midnight
    - cron:  '0 0 * * 0'
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    name: Generate Database
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install poetry
      run: |
        python -m pip install --upgrade pip
        pip install poetry==1.8.0
    - name: Install dependencies
      run: |
        poetry install
    - name: Generate the database (quick)
      if: ${{ github.event_name == 'push' }}
      run: |
        echo "version=$(date '+%Y%m%d%H%M%S')" >> "$GITHUB_ENV"
        poetry run sgs-db "db.json"
    - name: Generate the database (verify)
      if: ${{ github.event_name == 'schedule' }}
      run: |
        echo "version=$(date '+%Y%m%d%H%M%S')" >> "$GITHUB_ENV"
        poetry run sgs-db -V "db.json"
    - name: Upload binaries to release
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: db.json
        asset_name: db.json
        tag: ${{ github.ref }}
        overwrite: true
        body: "Release for web UI"
    - name: Login to GitHub Packages Container registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Install oras
      run: |
        # upgrade to ORAS 1.0.0
        curl -LO https://github.com/oras-project/oras/releases/download/v1.0.0/oras_1.0.0_linux_amd64.tar.gz
        tar -xvf ./oras_1.0.0_linux_amd64.tar.gz
    - name: Upload assets to GHCR
      run: |
        ./oras version
        ./oras push --artifact-type application/vnd.sgs.config.v1+json \
            ghcr.io/${{ github.repository }}:latest,$(date '+%Y%m%d%H%M%S') \
            db.json:application/vnd.sgs.config.v1+json
    - name: Upload artifacts for UI build
      uses: actions/upload-artifact@v4
      with:
        name: database
        path: db.json
        retention-days: 1
  ui:
    name: Build UI
    needs: build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./ui
    strategy:
      matrix:
        node-version: [ 18 ]
    permissions:
      contents: 'read'
      id-token: 'write'
      pages: 'write'
      actions: 'write'
      checks: 'write'
      deployments: 'write'
    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
    - name: Install dependencies
      # Using npm ci is generally faster than running npm i because it caches dependencies
      run: |
        npm ci
    - name: Download built database
      uses: actions/download-artifact@v4
      with:
        name: database
        path: ui/database
    - name: Move database
      # Using npm ci is generally faster than running npm i because it caches dependencies
      run: |
        rm -f src/assets/db.json
        cp database/db.json src/assets/db.json
    - name: Build the app
      run: |
        npm run build  
    - name: Setup Pages
      uses: actions/configure-pages@v5
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        # Upload build directory content
        path: 'ui/dist/'
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
      env:  
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

